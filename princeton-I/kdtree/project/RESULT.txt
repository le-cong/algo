See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  17/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 65.33%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.8K Jul 15 14:47 KdTree.java
 902 Jul 15 14:47 KdTreeGenerator.java
1.4K Jul 15 14:47 KdTreeVisualizer.java
2.2K Jul 15 14:47 NearestNeighborVisualizer.java
2.0K Jul 15 14:47 PointSET.java
3.4K Jul 15 14:47 RangeSearchVisualizer.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
    - failed on trial 11 of 1000
    - sequence of points inserted: 
      A  1.0 0.0
      B  0.5 0.5
      C  1.0 1.0
      D  0.75 0.0
      E  0.0 0.5
      F  0.5 1.0
      G  1.0 0.25
      H  0.5 0.25
      I  0.0 0.25
      J  0.75 0.25
    - query point                   = (0.75, 0.0)
    - student   nearest()           = (1.0, 0.0)
    - reference nearest()           = (0.75, 0.0)
    - student   distanceSquaredTo() = 0.0625
    - reference distanceSquaredTo() = 0

  * 15 random points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - sequence of points inserted: 
      A  0.625 0.25
      B  0.875 0.125
      C  0.5 0.625
      D  0.0 0.5
      E  0.5 0.25
      F  0.0 0.25
      G  0.375 0.875
      H  0.375 0.75
      I  0.75 0.375
      J  0.875 0.375
      K  0.125 0.875
      L  0.25 0.625
      M  0.125 0.0
      N  0.125 0.0
      O  0.125 0.5
    - query point                   = (0.0, 0.0)
    - student   nearest()           = (0.0, 0.25)
    - reference nearest()           = (0.125, 0.0)
    - student   distanceSquaredTo() = 0.0625
    - reference distanceSquaredTo() = 0.015625

  * 20 random points in a 16-by-16 grid
    - failed on trial 112 of 1000
    - sequence of points inserted: 
      A  1.0 0.0625
      B  0.9375 0.8125
      C  0.625 0.8125
      D  0.5625 0.1875
      E  0.25 0.375
      F  0.25 1.0
      G  1.0 0.3125
      H  0.4375 0.0625
      I  0.375 0.9375
      J  0.375 0.0
      K  0.5 0.6875
      L  0.75 0.0625
      M  1.0 0.5
      N  0.125 0.6875
      O  0.9375 0.0625
      P  0.75 0.1875
      Q  0.125 0.625
      R  0.125 0.3125
      S  0.3125 0.1875
      T  0.375 0.8125
    - query point                   = (0.25, 0.0)
    - student   nearest()           = (0.4375, 0.0625)
    - reference nearest()           = (0.375, 0.0)
    - student   distanceSquaredTo() = 0.0390625
    - reference distanceSquaredTo() = 0.015625

  * 100 random points in a 32-by-32 grid
    - failed on trial 26 of 1000
    - query point                   = (0.46875, 0.0)
    - student   nearest()           = (0.4375, 0.09375)
    - reference nearest()           = (0.46875, 0.0)
    - student   distanceSquaredTo() = 0.009765625
    - reference distanceSquaredTo() = 0

  * 10000 random points in a 65536-by-65536 grid
==> FAILED

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 12 of 10000
    - student   nearest()  = (1.0, 0.0)
    - reference nearest()  = (0.0, 0.0)
    - student   distanceSquaredTo() = 1
    - reference distanceSquaredTo() = 0
    - sequence of operations was:
           set.isEmpty()  ==>  true
           set.insert((0.0, 1.0))
           set.size()     ==>  1
           set.insert((0.0, 0.0))
           set.insert((1.0, 0.0))
           set.insert((0.0, 0.0))
           set.isEmpty()  ==>  false
           set.insert((1.0, 0.0))
           set.range([0.0, 1.0] x [0.0, 1.0])  ==>  (0.0, 0.0) (1.0, 0.0) (0.0, 1.0) 
           set.insert((0.0, 0.0))
           set.nearest((1.0, 1.0))   ==>  (1.0, 0.0)
           set.nearest((0.0, 0.0))   ==>  (1.0, 0.0)

  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 665 of 10000
    - student   nearest()  = (0.125, 0.0)
    - reference nearest()  = (0.0625, 0.0)
    - student   distanceSquaredTo() = 0.015625
    - reference distanceSquaredTo() = 0.00390625

  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 19 of 10000
    - student   nearest()  = (0.93359375, 0.328125)
    - reference nearest()  = (0.892578125, 0.044921875)
    - student   distanceSquaredTo() = 0.086628913879395
    - reference distanceSquaredTo() = 0.083107948303223
    - sequence of operations was:
           set.isEmpty()  ==>  true
           set.insert((0.892578125, 0.044921875))
           set.range([0.0576171875, 0.1728515625] x [0.3896484375, 0.46484375])  ==>  empty
           set.nearest((0.8369140625, 0.275390625))   ==>  (0.892578125, 0.044921875)
           set.range([0.41015625, 0.4814453125] x [0.09375, 0.78125])  ==>  empty
           set.size()     ==>  1
           set.insert((0.93359375, 0.328125))
           set.isEmpty()  ==>  false
           set.insert((0.365234375, 0.5791015625))
           set.isEmpty()  ==>  false
           set.range([0.6142578125, 0.7294921875] x [0.8515625, 0.9951171875])  ==>  empty
           set.contains((0.8095703125, 0.5615234375))  ==>  false
           set.range([0.33984375, 0.4912109375] x [0.5361328125, 0.74609375])  ==>  (0.365234375, 0.5791015625) 
           set.range([0.6064453125, 0.7021484375] x [0.1015625, 0.3203125])  ==>  empty
           set.isEmpty()  ==>  false
           set.size()     ==>  3
           set.isEmpty()  ==>  false
           set.nearest((0.9501953125, 0.654296875))   ==>  (0.93359375, 0.328125)
           set.nearest((0.6611328125, 0.216796875))   ==>  (0.93359375, 0.328125)

  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 12 of 10000
    - student   nearest()  = (0.6163330078125, 0.333740234375)
    - reference nearest()  = (0.221435546875, 0.2877197265625)
    - student   distanceSquaredTo() = 0.506042912602425
    - reference distanceSquaredTo() = 0.497759357094765
    - sequence of operations was:
           set.isEmpty()  ==>  true
           set.size()     ==>  0
           set.insert((0.221435546875, 0.2877197265625))
           set.isEmpty()  ==>  false
           set.nearest((0.11376953125, 0.547119140625))   ==>  (0.221435546875, 0.2877197265625)
           set.range([0.2578125, 0.919921875] x [0.92578125, 0.9622802734375])  ==>  empty
           set.nearest((0.1824951171875, 0.1102294921875))   ==>  (0.221435546875, 0.2877197265625)
           set.isEmpty()  ==>  false
           set.insert((0.6163330078125, 0.333740234375))
           set.range([0.1549072265625, 0.9100341796875] x [0.125732421875, 0.483154296875])  ==>  (0.221435546875, 0.2877197265625) (0.6163330078125, 0.333740234375) 
           set.contains((0.0386962890625, 0.9150390625))  ==>  false
           set.nearest((0.329833984375, 0.98486328125))   ==>  (0.6163330078125, 0.333740234375)

  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
    - failed on trial 9 of 10000
    - student   nearest()  = (0.81103515625, 0.7643890380859375)
    - reference nearest()  = (0.2121124267578125, 0.5244903564453125)
    - student   distanceSquaredTo() = 0.23621488106437
    - reference distanceSquaredTo() = 0.028036360163242
    - sequence of operations was:
           set.insert((0.2121124267578125, 0.5244903564453125))
           set.range([0.63671875, 0.882080078125] x [0.7738494873046875, 0.8172760009765625])  ==>  empty
           set.isEmpty()  ==>  false
           set.isEmpty()  ==>  false
           set.range([0.445526123046875, 0.8372802734375] x [0.1511077880859375, 0.6118621826171875])  ==>  empty
           set.range([0.5004425048828125, 0.65093994140625] x [0.2183685302734375, 0.729827880859375])  ==>  empty
           set.nearest((0.79656982421875, 0.44586181640625))   ==>  (0.2121124267578125, 0.5244903564453125)
           set.insert((0.81103515625, 0.7643890380859375))
           set.nearest((0.378570556640625, 0.5426025390625))   ==>  (0.81103515625, 0.7643890380859375)

==> FAILED

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 6/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 4 of 5
    - student   size()    = 4
    - reference size()    = 3
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0
      B  0.0 1.0
      C  1.0 1.0
      D  1.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 9 of 10
    - student   size()    = 9
    - reference size()    = 8
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.25
      B  0.5 0.5
      C  0.75 1.0
      D  0.75 0.0
      E  0.25 0.0
      F  1.0 0.75
      G  0.0 0.25
      H  0.5 0.0
      I  1.0 0.75

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 12 of 50
    - student   size()    = 12
    - reference size()    = 11
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.75 0.75
      B  0.125 0.125
      C  0.5 0.5
      D  0.25 0.875
      E  0.625 1.0
      F  0.875 0.75
      G  1.0 0.25
      H  0.875 0.625
      I  0.25 0.0
      J  0.125 0.5
      K  0.875 1.0
      L  0.125 0.5

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 23 of 100000
    - student   size()    = 23
    - reference size()    = 22
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.6875 0.4375
      B  0.875 0.5
      C  0.1875 1.0
      D  0.6875 0.125
      E  0.125 0.0
      F  0.9375 0.0625
      G  0.0625 0.0625
      H  0.875 0.25
      I  1.0 0.625
      J  0.5 0.1875
      K  0.875 0.375
      L  0.125 0.25
      M  0.5625 0.1875
      N  0.875 0.125
      O  0.5 0.3125
      P  0.375 0.8125
      Q  0.4375 0.6875
      R  0.375 0.625
      S  0.8125 0.4375
      T  1.0 0.1875
      U  0.5625 0.3125
      V  0.0 0.9375
      W  0.125 0.25

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 314 of 100000
    - student   size()    = 314
    - reference size()    = 313
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1117 of 100000
    - student   size()    = 1117
    - reference size()    = 1116
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 432 of 10000
    - query point          = (0.4, 0.7)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 2 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  1.0 0.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.25, 0.25)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.0 1.0
      B  0.875 0.375
      C  0.125 0.875
      D  0.25 0.25
      E  0.375 0.0

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 21 of 10000
    - query point          = (0.3125, 0.3125)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.0 0.25
      B  0.1875 0.1875
      C  0.75 0.5
      D  0.25 0.75
      E  0.375 0.0
      F  0.875 0.5625
      G  0.0625 0.125
      H  0.9375 0.0625
      I  0.5625 0.9375
      J  0.3125 0.3125

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 104 of 10000
    - query point          = (0.21875, 0.0625)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.25 0.6875
      B  0.84375 0.1875
      C  0.3125 0.375
      D  0.9375 0.875
      E  0.375 0.46875
      F  0.1875 0.5625
      G  0.40625 0.90625
      H  0.875 0.125
      I  0.71875 0.15625
      J  0.5 1.0
      K  0.4375 0.84375
      L  0.96875 0.4375
      M  0.21875 0.0625
      N  0.90625 0.9375
      O  0.46875 0.65625
      P  1.0 0.03125
      Q  0.09375 0.625
      R  0.28125 0.21875
      S  0.625 0.96875
      T  0.15625 0.34375

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1794 of 10000
    - query point          = (0.2314453125, 0.9638671875)
    - student   contains() = false
    - reference contains() = true

  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 2 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.0 1.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 5 of 10000
    - query point          = (0.5, 0.75)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.0 0.75
      B  0.25 0.75
      C  0.5 0.5
      D  0.5 0.25
      E  0.0 1.0
      F  1.0 0.75
      G  0.75 0.5
      H  0.75 1.0
      I  0.5 0.75
      J  1.0 1.0

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query point          = (0.625, 0.625)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  1.0 0.25
      B  0.25 0.125
      C  0.375 1.0
      D  0.625 0.375
      E  0.75 1.0
      F  1.0 0.75
      G  0.375 0.25
      H  0.0 0.125
      I  0.625 0.625
      J  1.0 0.875
      K  1.0 0.625
      L  0.625 0.25
      M  0.375 0.375
      N  0.0 0.5
      O  0.875 0.0
      P  0.875 0.25
      Q  0.5 0.25
      R  0.5 1.0
      S  0.125 0.0
      T  0.375 0.875

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.71875, 0.0703125)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 16 of 10000
    - query point          = (0.9755859375, 0.79296875)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 65536-by-65536 grid
==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 0.0)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.6875, 0.75)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.8125, 0.71875)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 76 of 10000
    - query point          = (0.9609375, 0.0859375)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [0.0, 1.0]
    - student   range():  H D D D D L D D D D D D D D D D D D D D D D D D D D ...
    - reference range():  H D L F X G 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0625, 1.0] x [0.125, 0.5]
    - student   range():  E J J J J J J J J J J J J J J J J J J J J H D L L L ...
    - reference range():  E N P J C X W R D L H D I K O T N N T L G G G D D X ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.9140625, 0.9453125] x [0.015625, 0.7265625]
    - student   range():  S W D T B Y Y N P P W D D T Z E C H A L V K D K O I ...
    - reference range():  S W D T B Y N P P W D D T Z E C H A L V K O I G X Q ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.0, 0.25] x [0.25, 0.75]
    - sequence of points inserted: 
      A  0.0 0.5
      B  0.0 0.5
      C  0.5 1.0
      D  0.5 0.0
      E  0.5 0.5
    - student   range():  B B 
    - reference range():  B 

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.0, 0.125] x [0.625, 0.875]
    - sequence of points inserted: 
      A  0.0 0.75
      B  1.0 0.75
      C  0.25 0.75
      D  0.75 0.0
      E  0.25 1.0
      F  0.0 0.0
      G  1.0 0.25
      H  0.0 1.0
      I  0.0 0.75
      J  1.0 0.5
    - student   range():  I I 
    - reference range():  I 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.8125, 0.9375] x [0.5625, 0.6875]
    - sequence of points inserted: 
      A  0.875 0.625
      B  0.0 0.125
      C  0.25 1.0
      D  0.875 0.375
      E  0.875 0.625
      F  0.0 0.125
      G  0.875 0.25
      H  0.125 0.625
      I  0.0 0.875
      J  0.25 0.75
      K  0.375 0.625
      L  0.125 0.625
      M  0.875 0.375
      N  0.125 0.0
      O  0.625 0.25
      P  0.875 0.875
      Q  0.0 0.75
      R  0.875 0.375
      S  0.625 0.125
      T  0.25 0.875
    - student   range():  E E 
    - reference range():  E 

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.55078125, 0.55859375] x [0.30859375, 0.31640625]
    - student   range():  Y Y 
    - reference range():  Y 

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.5, 0.5)

  * input5.txt
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.2, 0.3)

  * input10.txt
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.499, 0.208)

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.875, 0.625)

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.25, 0.0625)

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.3125, 0.8125)

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.375, 0.328125)

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.143035888671875, 0.4624176025390625)

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.25, 0.75)

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.375, 0.125)

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.5, 0.125)

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.71875, 0.96875)

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.177520751953125, 0.36578369140625)

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.3125, 0.375)

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.5234375, 0.7421875)

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - student   nearest()  = null
    - reference nearest()  = (0.728515625, 0.025390625)

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = null
    - reference nearest() = (0.7, 0.2)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.67, 0.26)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = null
    - reference nearest() = (0.564, 0.413)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.76, 0.3)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = null
    - reference nearest() = (0.875, 0.25)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (1.0, 0.125)
    - sequence of points inserted: 
      A  0.625 0.375
      B  0.0 0.75
      C  0.875 0.25
      D  0.25 0.5
      E  0.75 0.625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = null
    - reference nearest() = (0.4375, 0.5625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.1875, 0.875)
    - sequence of points inserted: 
      A  0.5 0.375
      B  1.0 0.8125
      C  0.125 0.0
      D  0.6875 0.6875
      E  0.4375 0.5625
      F  0.625 0.3125
      G  0.0625 0.4375
      H  0.9375 0.25
      I  0.3125 0.125
      J  0.875 0.9375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C E G B J D F 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = null
    - reference nearest() = (0.1875, 0.3125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.125)
    - sequence of points inserted: 
      A  0.25 0.40625
      B  0.1875 0.3125
      C  0.09375 0.84375
      D  0.5 0.5625
      E  1.0 0.53125
      F  0.3125 0.65625
      G  0.375 0.4375
      H  0.625 0.25
      I  0.96875 0.625
      J  0.9375 0.6875
      K  0.78125 0.75
      L  0.28125 0.0
      M  0.21875 0.8125
      N  0.0 0.78125
      O  0.75 0.5
      P  0.34375 1.0
      Q  0.46875 0.34375
      R  0.8125 0.375
      S  0.875 0.9375
      T  0.4375 0.28125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      empty
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C M N D E G H L Q T 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = null
    - reference nearest() = (0.765625, 0.078125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 8
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = null
    - reference nearest() = (0.390625, 0.109375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 12
    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = null
    - reference nearest() = (0.75048828125, 0.580078125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 0
    - number of reference entries = 18
    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.0, 0.75)
    - reference distanceSquaredTo() = 0.09765625
    - sequence of operations was:
           st.insert(0.0, 0.75)
           st.insert(0.8125, 0.6875)
           st.insert(0.75, 0.375)
           st.insert(0.875, 0.625)
           st.contains((0.375, 0.5))  ==>  false
           st.size()  ==>  4
           st.nearest((0.1875, 1.0))   ==>  null

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 8 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.453125, 0.484375)
    - reference distanceSquaredTo() = 0.00885009765625
    - sequence of operations was:
           st.insert(0.171875, 0.296875)
           st.insert(0.453125, 0.484375)
           st.range([0.15625, 0.421875] x [0.3046875, 0.7109375])  ==>  empty
           st.size()  ==>  2
           st.contains((0.1484375, 0.4140625))  ==>  false
           st.contains((0.4375, 0.5859375))  ==>  false
           st.range([0.484375, 0.515625] x [0.1015625, 0.6171875])  ==>  empty
           st.nearest((0.546875, 0.4765625))   ==>  null

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.22265625, 0.5087890625)
    - reference distanceSquaredTo() = 0.022843360900879
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.5966796875, 0.759765625)
           st.contains((0.4326171875, 0.2138671875))  ==>  false
           st.range([0.2001953125, 0.8740234375] x [0.140625, 0.4306640625])  ==>  empty
           st.range([0.0927734375, 0.9169921875] x [0.08203125, 0.1015625])  ==>  empty
           st.insert(0.125, 0.873046875)
           st.insert(0.22265625, 0.5087890625)
           st.insert(0.5068359375, 0.7119140625)
           st.insert(0.4033203125, 0.4716796875)
           st.range([0.0595703125, 0.92578125] x [0.357421875, 0.369140625])  ==>  empty
           st.nearest((0.15234375, 0.642578125))   ==>  null

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.1424560546875, 0.814453125)
    - reference distanceSquaredTo() = 0.343397438526154
    - sequence of operations was:
           st.insert(0.0421142578125, 0.8082275390625)
           st.size()  ==>  1
           st.range([0.200439453125, 0.4873046875] x [0.4842529296875, 0.8399658203125])  ==>  empty
           st.insert(0.1424560546875, 0.814453125)
           st.nearest((0.2945556640625, 0.24853515625))   ==>  null

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 14 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.3851470947265625, 0.74041748046875)
    - reference distanceSquaredTo() = 0.009637820767239
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(0.067413330078125, 0.8118133544921875)
           st.range([0.811981201171875, 0.8142547607421875] x [0.7732696533203125, 0.98626708984375])  ==>  empty
           st.insert(0.9701995849609375, 0.1543121337890625)
           st.insert(0.9347686767578125, 0.4208221435546875)
           st.contains((0.560211181640625, 0.1620330810546875))  ==>  false
           st.insert(0.3851470947265625, 0.74041748046875)
           st.insert(0.1343536376953125, 0.102325439453125)
           st.range([0.1092071533203125, 0.4167022705078125] x [0.5217742919921875, 0.6514892578125])  ==>  empty
           st.contains((0.473052978515625, 0.881988525390625))  ==>  false
           st.range([0.1440582275390625, 0.38433837890625] x [0.220733642578125, 0.4215240478515625])  ==>  empty
           st.range([0.4035491943359375, 0.6098480224609375] x [0.3128204345703125, 0.5222930908203125])  ==>  empty
           st.nearest((0.3318939208984375, 0.8228912353515625))   ==>  null

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = null
    - reference nearest()  = (1.0, 0.0)
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.insert(1.0, 0.0)
           st.nearest((0.0, 0.0))   ==>  null

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.25, 0.625)
    - reference distanceSquaredTo() = 0.1328125
    - sequence of operations was:
           st.insert(0.125, 0.1875)
           st.contains((0.9375, 0.5625))  ==>  false
           st.insert(0.25, 0.625)
           st.contains((0.1875, 0.125))  ==>  false
           st.insert(0.0625, 0.4375)
           st.insert(1.0, 0.8125)
           st.nearest((0.4375, 0.9375))   ==>  null

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.484375, 0.4921875)
    - reference distanceSquaredTo() = 0.130126953125
    - sequence of operations was:
           st.insert(0.484375, 0.4921875)
           st.nearest((0.453125, 0.1328125))   ==>  null

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.880859375, 0.2021484375)
    - reference distanceSquaredTo() = 0.769742012023926
    - sequence of operations was:
           st.insert(0.880859375, 0.2021484375)
           st.range([0.349609375, 0.9208984375] x [0.40234375, 0.7333984375])  ==>  empty
           st.nearest((0.0478515625, 0.4775390625))   ==>  null

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 10 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.4903564453125, 0.9932861328125)
    - reference distanceSquaredTo() = 0.009149149060249
    - sequence of operations was:
           st.insert(0.230712890625, 0.1158447265625)
           st.insert(0.4903564453125, 0.9932861328125)
           st.contains((0.5924072265625, 0.7525634765625))  ==>  false
           st.range([0.0126953125, 0.578369140625] x [0.25390625, 0.9208984375])  ==>  empty
           st.isEmpty()  ==>  false
           st.range([0.0177001953125, 0.8726806640625] x [0.557861328125, 0.792724609375])  ==>  empty
           st.insert(0.5804443359375, 0.846923828125)
           st.range([0.721923828125, 0.73291015625] x [0.1585693359375, 0.2047119140625])  ==>  empty
           st.insert(0.821044921875, 0.210205078125)
           st.nearest((0.5859375, 0.9969482421875))   ==>  null

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 8 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.1024322509765625, 0.3658905029296875)
    - reference distanceSquaredTo() = 0.556421427521855
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(0.1024322509765625, 0.3658905029296875)
           st.range([0.05291748046875, 0.134368896484375] x [0.265380859375, 0.758087158203125])  ==>  E 
           st.contains((0.457000732421875, 0.5243072509765625))  ==>  false
           st.range([0.7909393310546875, 0.9321136474609375] x [0.046051025390625, 0.6616363525390625])  ==>  empty
           st.range([0.0262298583984375, 0.25933837890625] x [0.4846038818359375, 0.640960693359375])  ==>  empty
           st.nearest((0.74249267578125, 0.74896240234375))   ==>  null

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.0, 1.0)
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.0, 1.0)
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  B 
           st.insert(1.0, 0.0)
           st.nearest((1.0, 1.0))   ==>  null

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 9 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.75, 0.625)
    - reference distanceSquaredTo() = 0.0703125
    - sequence of operations was:
           st.insert(0.0625, 0.9375)
           st.insert(0.125, 0.75)
           st.range([0.125, 0.75] x [0.1875, 0.3125])  ==>  empty
           st.size()  ==>  2
           st.insert(0.625, 0.4375)
           st.contains((0.4375, 0.75))  ==>  false
           st.insert(0.75, 0.625)
           st.range([0.3125, 0.4375] x [0.1875, 0.75])  ==>  empty
           st.nearest((0.9375, 0.8125))   ==>  null

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.46875, 0.234375)
    - reference distanceSquaredTo() = 0.108642578125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.46875, 0.234375)
           st.contains((0.53125, 0.3359375))  ==>  false
           st.range([0.3515625, 0.6484375] x [0.6953125, 0.9765625])  ==>  empty
           st.nearest((0.1875, 0.0625))   ==>  null

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.7646484375, 0.109375)
    - reference distanceSquaredTo() = 0.650644302368164
    - sequence of operations was:
           st.insert(0.7646484375, 0.109375)
           st.contains((0.935546875, 0.525390625))  ==>  false
           st.nearest((0.37109375, 0.8134765625))   ==>  null

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.0521240234375, 0.8546142578125)
    - reference distanceSquaredTo() = 0.047733336687088
    - sequence of operations was:
           st.insert(0.0521240234375, 0.8546142578125)
           st.size()  ==>  1
           st.insert(0.404296875, 0.1502685546875)
           st.range([0.759765625, 0.8870849609375] x [0.51171875, 0.9664306640625])  ==>  empty
           st.nearest((0.249755859375, 0.761474609375))   ==>  null

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = null
    - reference nearest()  = (0.6814727783203125, 0.2246246337890625)
    - reference distanceSquaredTo() = 0.004260340938345
    - sequence of operations was:
           st.insert(0.2438507080078125, 0.1314697265625)
           st.insert(0.6814727783203125, 0.2246246337890625)
           st.nearest((0.6230010986328125, 0.19561767578125))   ==>  null

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 11/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          112                160
=> passed        2          192                288
=> passed        5          432                672
=> passed       10          832               1312
=> passed       25         2032               3232
=> passed      100         8032              12832
=> passed      400        32032              51232
=> passed      800        64032             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 80.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1369292         
=> passed   320000    1279398         
=> passed   640000    1277657         
=> passed  1280000    1093685         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     829379         
=> passed   320000     683620         
=> passed   640000     649221         
=> passed  1280000     603899         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5033         
=> passed    20000       1628         
=> passed    40000        742         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       6134         
=> passed    20000       1667         
=> passed    40000        756         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    2047237               0.0              22.1              21.1               0.0         
=> passed   320000    1841589               0.0              22.5              21.5               0.0         
=> passed   640000    1352595               0.0              24.0              23.0               0.0         
=> passed  1280000    1006302               0.0              26.1              25.1               0.0         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1733067               0.0               0.0               0.0         
=> passed    20000    1854702               0.0               0.0               0.0         
=> passed    40000    1862810               0.0               0.0               0.0         
=> passed    80000    1864155               0.0               0.0               0.0         
=> passed   160000    1861468               0.0               0.0               0.0         
=> passed   320000    1861881               0.0               0.0               0.0         
=> passed   640000    1863550               0.0               0.0               0.0         
=> passed  1280000    1793035               0.0               0.0               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     360829              62.3              31.1              81.9              42.5         
=> passed    20000     322907              65.1              32.6              85.9              48.8         
=> passed    40000     303626              78.6              39.3             103.2              52.7         
=> passed    80000     251421              81.3              40.7             106.5              55.0         
=> passed   160000     232098              85.0              42.5             113.1              63.2         
=> passed   320000     205521              80.5              40.2             105.7              55.7         
=> passed   640000     195591              86.6              43.3             113.8              62.6         
=> passed  1280000     218782              94.1              47.0             123.0              60.1         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> FAILED    10000  1744365                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    20000  1853865                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    40000  1862406                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    80000  1864645                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   160000  1863152                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   320000  1866283                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   640000  1864102                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED  1280000  1863463                   0.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
==> 0/8 tests passed



Total: 20/28 tests passed!


================================================================


