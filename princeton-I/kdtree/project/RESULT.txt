See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  8/35 tests passed
Memory:       16/16 tests passed
Timing:       27/42 tests passed

Aggregate score: 46.57%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.1K Jul 15 19:07 KdTree.java
 902 Jul 15 19:07 KdTreeGenerator.java
1.4K Jul 15 19:07 KdTreeVisualizer.java
2.2K Jul 15 19:07 NearestNeighborVisualizer.java
2.1K Jul 15 19:07 PointSET.java
3.4K Jul 15 19:07 RangeSearchVisualizer.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:84:16: '!=' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:84:16: '!=' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:190:38: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:191:38: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:198:23: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:200:33: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:204:24: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 5 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid

    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point2D exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * 100000 random distinct points in a 65536-by-65536 grid
Exception in thread "main" 
    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    OperationCountLimitExceededException
    Number of calls to methods in Point2D exceeds limit: 1000000000
    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	at edu.princeton.cs.algs4.Point2D.checkOperationCount(Point2D.java:117)
	at edu.princeton.cs.algs4.Point2D.<init>(Point2D.java:124)
	at TestKdTree.randomPointInGrid(TestKdTree.java:105)
	at TestKdTree.randomPointsInGrid(TestKdTree.java:117)
	at TestKdTree.checkContains(TestKdTree.java:222)
	at TestKdTree.test2c(TestKdTree.java:1656)
	at TestKdTree.main(TestKdTree.java:1947)


Total: 0/27 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          112                160
=> passed        2          192                288
=> passed        5          432                672
=> passed       10          832               1312
=> passed       25         2032               3232
=> passed      100         8032              12832
=> passed      400        32032              51232
=> passed      800        64032             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 80.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     761991         
=> passed   320000     973356         
=> passed   640000     725182         
=> passed  1280000     631537         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     595643         
=> passed   320000     546333         
=> passed   640000     481618         
=> passed  1280000     429734         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3525         
=> passed    20000       1420         
=> passed    40000        417         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3537         
=> passed    20000       1392         
=> passed    40000        559         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     999543               0.0              22.1              21.1              21.6         
=> passed   320000    1023536               0.0              22.5              21.5              22.0         
=> passed   640000     695587               0.0              24.0              23.0              23.5         
=> passed  1280000     584796               0.0              26.1              25.1              25.6         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> FAILED    10000       5310   (0.0x)      0.0               0.0           10000.0 (100.0x)
=> FAILED    20000       1942   (0.0x)      0.0               0.0           20000.0 (200.0x)
=> FAILED    40000        909   (0.0x)      0.0               0.0           40000.0 (400.0x)
=> FAILED    80000        176   (0.0x)      0.0               0.0           80000.0 (800.0x)
=> FAILED   160000         65   (0.0x)      0.0               0.0          160000.0 (2e+03x)
=> FAILED   320000         32   (0.0x)      0.0               0.0          320000.0 (3e+03x)
=> FAILED   640000         15   (0.0x)      0.0               0.0          640000.0 (6e+03x)
=> FAILED  1280000          9   (0.0x)      0.0               0.0          1280000.0 (1e+04x)
==> 0/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     203599              59.1              29.5              78.0              41.8         
=> passed    20000     224742              63.7              31.9              84.4              46.9         
=> passed    40000     283741              69.6              34.8              92.0              48.0         
=> passed    80000     146036              76.1              38.0             100.9              54.7         
=> passed   160000     127033              79.4              39.7             103.9              54.6         
=> passed   320000     172326              81.0              40.5             107.2              59.2         
=> passed   640000     118567              84.1              42.0             110.4              59.8         
=> passed  1280000     126072              89.4              44.7             117.5              62.7         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000    74307                   0.0                    0.0                   817.5             823.4         
=> FAILED    20000    43999                   0.0                    0.0                  1115.4   (1.4x)   1112.4   (1.4x)
=> FAILED    40000    23881   (0.8x)          0.0                    0.0                  2386.0   (3.0x)   2316.1   (2.9x)
=> FAILED    80000    30491                   0.0                    0.0                  1872.6   (2.3x)   1917.7   (2.4x)
=> FAILED   160000    19730   (0.7x)          0.0                    0.0                  2871.9   (3.6x)   2708.6   (3.4x)
=> FAILED   320000    15245   (0.8x)          0.0                    0.0                  3362.8   (4.2x)   3370.7   (4.2x)
=> FAILED   640000     5787   (0.3x)          0.0                    0.0                  7501.4   (9.4x)   7269.6   (9.1x)
=> FAILED  1280000     5827   (0.3x)          0.0                    0.0                  8561.7  (10.7x)   8495.9  (10.6x)
==> 1/8 tests passed



Total: 13/28 tests passed!


================================================================


