See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (9 warnings)
Checkstyle:   PASSED

Correctness:  20/36 tests passed
Memory:       4/4 tests passed
Timing:       21/27 tests passed

Aggregate score: 68.89%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 301 Jul 24 21:23 Outcast.java
3.4K Jul 24 21:23 SAP.java
4.1K Jul 24 21:23 WordNet.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac SAP.java
*-----------------------------------------------------------

% javac WordNet.java
*-----------------------------------------------------------

% javac Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'wn' but that value is never used.  At WordNet.java:[line 144]


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:3: Avoid unused parameter variables, such as 'wordnet'. [UnusedFormalParameter]
Outcast.java:13: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
SAP.java:13: The private instance (or static) variable 'g' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:12: The private instance (or static) variable 'dict' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:13: The private instance (or static) variable 'dictName2Id' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:14: The private instance (or static) variable 'graph' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:15: The private instance (or static) variable 'root' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:78: The 'if' or 'else' clause appears to serve no purpose because its body is empty. [EmptyIfStmt]
WordNet.java:144: Avoid unused local variables, such as 'wn'. [UnusedLocalVariable]
PMD ends with 9 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------
[INFO] WordNet.java:1: The program uses neither 'DirectedCycle' nor 'Topological' to check whether the digraph is a DAG. [Design]

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 20 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph9.txt
==> passed

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
==> passed

Test 3: check length() and ancestor() on directed paths
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 4: check length() and ancestor() on directed cycles
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 5: check length() and ancestor() on complete graphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 6: check length() and ancestor() on tournament digraphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 7: check length() and ancestor() on complete binary trees
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
  * digraph3.txt and digraph4.txt
  * digraph5.txt and digraph6.txt
  * digraph2.txt and digraph1.txt
==> passed

Test 15: check whether SAP is immutable
  * digraph1.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 3
    - student length before = 2
    - student length after  = 1

  * digraph2.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 4
    - student length after  = 1

  * digraph3.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = -1
    - student length after  = 1

  * digraph4.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = 3
    - student length after  = 1

  * digraph5.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = -1
    - student length after  = 1

  * digraph6.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 2
    - student length after  = 1

  * digraph-ambiguous-ancestor.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 2
    - student length after  = 1

==> FAILED

Test 16: check length() and ancestor() with iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
==> passed

Test 17: check length() and ancestor() with zero-length iterable arguments
  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> passed

Test 18: check length() and ancestor() with invalid arguments
  * G = digraph1.txt v = -1, w = 0
  * G = digraph1.txt v = 0, w = -1
  * G = digraph1.txt v = 13, w = 0
  * G = digraph1.txt v = 0, w = 13
==> passed

Test 19: check iterable versions of length() and ancestor() with invalid arguments
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = null
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

  * G = digraph1.txt, v = null, w = { 1, 2, 4, 5, 10 }
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

  * G = digraph1.txt, v = null, w = null
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

  * G = digraph1.txt, v = { 0, 7, 9, 12, -1 }, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, -1, 4, 5, 10 }
  * G = digraph1.txt, v = { 13, 0, 7, 9, 12 }, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, 4, 5, 13, 10 }
  * G = digraph1.txt, v = { 0, null, 7, 9, 12 }, w = { 1, 2, 4, 5, 10 }
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, 4, null, 5, 10 }
    - throws the wrong exception when calling length() with invalid argument
    - length() throws a java.lang.NullPointerException
    - length() should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with invalid argument
    - ancestor() throws a java.lang.NullPointerException
    - ancestor() should throw a java.lang.IllegalArgumentException

==> FAILED

Test 20: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
==> passed


Total: 18/20 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - nounA = dictator
    - nounB = permission
    - student   distance() = -1
    - reference distance() = 10
    - failed on noun pair 1 of 1000

==> FAILED

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - nounA = b
    - nounB = a
    - student   distance() = -1
    - reference distance() = 1
    - failed on noun pair 15

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1
    - failed on noun pair 1

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1
    - failed on noun pair 1

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - nounA = a
    - nounB = c
    - student   distance() = 5
    - reference distance() = 2
    - failed on noun pair 2

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1
    - failed on noun pair 1

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - nounA = a
    - nounB = d
    - student   distance() = 3
    - reference distance() = 2
    - failed on noun pair 3

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - nounA = a
    - nounB = g
    - student   distance() = -1
    - reference distance() = 3
    - failed on noun pair 6

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - nounA = a
    - nounB = c
    - student   distance() = -1
    - reference distance() = 2
    - failed on noun pair 2

==> FAILED

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - nounA = human_gamma_globulin
    - nounB = immunoglobulin_D
    - reference distance() = 2
    - reference sap()      = gamma_globulin human_gamma_globulin
    - failed on noun pair 1 of 1000


    java.lang.IllegalArgumentException

    WordNet.distance(WordNet.java:103)
    TestWordNet.checkRandomDistance(TestWordNet.java:39)
    TestWordNet.test3(TestWordNet.java:149)
    TestWordNet.main(TestWordNet.java:829)

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - nounA = glyceride
    - nounB = thing
    - reference distance() = 7
    - reference sap()      = thing
    - failed on noun pair 1 of 1000


    java.lang.IllegalArgumentException

    WordNet.distance(WordNet.java:103)
    TestWordNet.checkRandomDistance(TestWordNet.java:39)
    TestWordNet.test3(TestWordNet.java:150)
    TestWordNet.main(TestWordNet.java:829)

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - nounA = autoantibody
    - nounB = athar
    - reference distance() = 7
    - reference sap()      = macromolecule supermolecule
    - failed on noun pair 1 of 1000


    java.lang.IllegalArgumentException

    WordNet.distance(WordNet.java:103)
    TestWordNet.checkRandomDistance(TestWordNet.java:39)
    TestWordNet.test3(TestWordNet.java:151)
    TestWordNet.main(TestWordNet.java:829)

==> FAILED

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed considering pair 1 of 1000
    - nounA = quiz
    - nounB = S/N
    - reference distance() = 10
    - reference sap()      = 'abstraction abstract_entity'


    java.lang.IllegalArgumentException

    WordNet.sap(WordNet.java:135)
    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:229)
    TestWordNet.test4(TestWordNet.java:304)
    TestWordNet.main(TestWordNet.java:832)

==> FAILED

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:310)
    TestWordNet.main(TestWordNet.java:835)

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:311)
    TestWordNet.main(TestWordNet.java:835)

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:312)
    TestWordNet.main(TestWordNet.java:835)

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:313)
    TestWordNet.main(TestWordNet.java:835)

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:314)
    TestWordNet.main(TestWordNet.java:835)

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:315)
    TestWordNet.main(TestWordNet.java:835)

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:316)
    TestWordNet.main(TestWordNet.java:835)

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - nounA = a
    - nounB = a
    - reference distance() = 0
    - reference sap()      = a
    - failed on noun pair 1


    java.lang.NullPointerException

    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkAllSAP(TestWordNet.java:276)
    TestWordNet.test5(TestWordNet.java:317)
    TestWordNet.main(TestWordNet.java:835)

==> FAILED

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - failed considering pair 1 of 1000
    - nounA = ricin
    - nounB = transaminase
    - reference distance() = 6
    - reference sap()      = 'protein'


    java.lang.IllegalArgumentException

    WordNet.sap(WordNet.java:135)
    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:229)
    TestWordNet.test6(TestWordNet.java:324)
    TestWordNet.main(TestWordNet.java:838)

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - failed considering pair 1 of 1000
    - nounA = nerve_growth_factor
    - nounB = medulla
    - reference distance() = 6
    - reference sap()      = 'macromolecule supermolecule'


    java.lang.IllegalArgumentException

    WordNet.sap(WordNet.java:135)
    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:229)
    TestWordNet.test6(TestWordNet.java:325)
    TestWordNet.main(TestWordNet.java:838)

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed considering pair 1 of 1000
    - nounA = shark_oil
    - nounB = bit
    - reference distance() = 10
    - reference sap()      = 'thing'


    java.lang.IllegalArgumentException

    WordNet.sap(WordNet.java:135)
    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.checkRandomSAP(TestWordNet.java:229)
    TestWordNet.test6(TestWordNet.java:326)
    TestWordNet.main(TestWordNet.java:838)

==> FAILED

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on noun 0


    java.lang.IllegalArgumentException

    WordNet.sap(WordNet.java:135)
    TestWordNet.checkImmutable(TestWordNet.java:350)
    TestWordNet.test7(TestWordNet.java:391)
    TestWordNet.main(TestWordNet.java:841)

==> FAILED

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
  * synsets3.txt, hypernyms3InvalidCycle.txt
  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
  * synsets6.txt, hypernyms6InvalidCycle.txt
  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
==> passed

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on trial 1
    - noun               = anamorphosis
    - student   isNoun() = false
    - reference isNoun() = true

  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> FAILED

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - number of entries in student   solution: 82192
    - number of entries in reference solution: 119188
    - 45754 extra entries in student solution, including:
      'zymosis zymolysis fermentation fermenting ferment'

    - 82750 missing entries in student solution, including:
      'zymurgy'

  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> FAILED

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
    - noun               = anamorphosis
    - student1   isNoun() = false
    - reference1 isNoun() = true

==> FAILED

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
==> passed

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
    - isNoun(null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
    - failed on call 1 to isNoun()
    - word               = a
    - student   isNoun() = false
    - reference isNoun() = true

  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
    - failed on call 1 to isNoun()
    - word               = Demotic
    - student   isNoun() = false
    - reference isNoun() = true

  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)

    java.lang.IllegalArgumentException

    WordNet.distance(WordNet.java:103)
    TestWordNet.random(TestWordNet.java:747)
    TestWordNet.test14(TestWordNet.java:785)
    TestWordNet.main(TestWordNet.java:862)

  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)

    java.lang.IllegalArgumentException

    WordNet.sap(WordNet.java:135)
    TestWordNet.checkOneRandomSAP(TestWordNet.java:157)
    TestWordNet.random(TestWordNet.java:764)
    TestWordNet.test14(TestWordNet.java:786)
    TestWordNet.main(TestWordNet.java:862)

==> FAILED


Total: 2/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = null
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = null
    - reference outcast() = Mickey_Mouse

  * outcast4.txt
    - nouns = [probability, statistics, mathematics, physics]
    - student   outcast() = null
    - reference outcast() = probability

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = null
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = null
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = null
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = null
    - reference outcast() = bed

  * outcast8a.txt
    - nouns = [Banti's_disease, hyperadrenalism, German_measles, gargoylism, Q_fever, amebiosis, anthrax, playboy]
    - student   outcast() = null
    - reference outcast() = playboy

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = null
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast9a.txt
    - nouns = [hair, eyes, arm, mouth, nose, ear, cheek, brow, chin]
    - student   outcast() = null
    - reference outcast() = eyes

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = null
    - reference outcast() = albatross

  * outcast10a.txt
    - nouns = [blue, green, yellow, brown, black, white, orange, violet, red, serendipity]
    - student   outcast() = null
    - reference outcast() = serendipity

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = null
    - reference outcast() = potato

  * outcast12.txt
    - nouns = [Dylan, folk, Guthrie, idol, Minneapolis, music, musical, playing, public, recognition, review, thunderbird]
    - student   outcast() = null
    - reference outcast() = Minneapolis

  * outcast12a.txt
    - nouns = [competition, cup, event, fielding, football, level, practice, prestige, team, tournament, world, mongoose]
    - student   outcast() = null
    - reference outcast() = mongoose

  * outcast17.txt
    - nouns = [art, canvas, china, culture, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = null
    - reference outcast() = particularism

  * outcast20.txt
    - nouns = [art, Buddha, Buddhism, canvas, china, culture, India, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = null
    - reference outcast() = particularism

  * outcast29.txt
    - nouns = [acorn, application, assembly, award, basic, cad, code, computer, custom, depth, development, finish, hardware, instruction, language, machine, model, operation, processor, project, silicon, simulation, software, speed, support, team, technology, test, mosque]
    - student   outcast() = null
    - reference outcast() = acorn

==> FAILED

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = null
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = null
    - reference outcast() = Mickey_Mouse

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = null
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = null
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = null
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = null
    - reference outcast() = bed

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = null
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = null
    - reference outcast() = tree

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = null
    - reference outcast() = albatross

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = null
    - reference outcast() = potato

==> FAILED


Total: 0/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 8348000 bytes
reference   memory    = 10320680 bytes
ratio                 = 0.81
maximum allowed ratio = 2.50

Total: 1/1 tests passed!


================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 349232 bytes
    - reference memory              = 1441648 bytes
    - student / reference ratio     = 0.2
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 1740576 bytes
    - reference memory              = 7042632 bytes
    - student / reference ratio     = 0.2
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 3568864 bytes
    - reference memory              = 16173480 bytes
    - student / reference ratio     = 0.2
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.00 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second: 1145867.00
     -  student   solution calls per second:  558983.00
     -  reference / student ratio:                 2.05

=> passed      student <= 50000x reference
=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> BONUS       student <=   100x reference
=> BONUS       student <=    10x reference

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  318470.00
     -  student   solution calls per second:   31937.00
     -  reference / student ratio:                 9.97

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference
=> BONUS       student <=    10x reference

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   20045.00
     -  student   solution calls per second:      90.00
     -  reference / student ratio:               222.72

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
         16384     0.05
         32768     0.15
         65536     0.24
==> passed


Total: 17/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
==> passed

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each

    java.lang.IllegalArgumentException

    WordNet.distance(WordNet.java:103)
    TimeWordNet.test2(TimeWordNet.java:165)
    TimeWordNet.main(TimeWordNet.java:497)

==> FAILED

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 1
  * calls to addEdge()   = 84505
  * calls to adj()       = 82192
  * calls to outdegree() = 82192
  * calls to indegree()  = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()

    java.lang.IllegalArgumentException

    WordNet.distance(WordNet.java:103)
    TimeWordNet.test4(TimeWordNet.java:327)
    TimeWordNet.main(TimeWordNet.java:503)

==> FAILED

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.21 seconds
    - maximum allowed     time = 10.00 seconds

==> passed

Test 6a-e: time sap() and distance() with random nouns

    java.lang.IllegalArgumentException

    WordNet.distance(WordNet.java:103)
    TimeWordNet.callsPerSecond(TimeWordNet.java:76)
    TimeWordNet.test6(TimeWordNet.java:416)
    TimeWordNet.main(TimeWordNet.java:509)

==> FAILED

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second: 1525383.00
    - student   solution calls per second:    1622.00
    - reference / student ratio:               940.43
    - allowed ratio:                             4.00
==> FAILED

Total: 3/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: count calls to methods in WordNet
 * outcast4.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 6
    - maximum allowed             = 16

 * outcast10.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 45
    - maximum allowed             = 100

 * outcast29.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 406
    - maximum allowed             = 841

==> FAILED

Test 2: timing calls to outcast() for various outcast files

Total time must not exceed 1.0 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.00

Total elapsed time: 0.00 seconds

==> passed


Total: 1/2 tests passed!


================================================================





